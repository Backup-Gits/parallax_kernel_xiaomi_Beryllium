#!/system/bin/sh 
#
# Parallax Init

# remove old config
if [ -d /data/media/0/.Parallax ]; then
	rm -fr /data/media/0/.Parallax
fi

# file specs to execute in initd directory - default=*
FSPEC="*"

# debug log - set to 1 (one) to write debug information; 0 (zero) to disable
DEBUG="1"
# Parallax dir
Parallax_DIR=/data/media/0/Parallax
#Parallax init
if [ ! -f $Parallax_DIR/av ]; then
	if [ -d /sbin ]; then
		echo "10" >> $Parallax_DIR/av
	else
		echo "11" >> $Parallax_DIR/av
	fi
fi
av=`cat $Parallax_DIR/av`;
if [ "$av" = "11" ]; then
	Parallax_INIT=/vendor/etc/Parallax
else
	Parallax_INIT=/sbin
fi
# initd directory
INITD=$Parallax_DIR/init
csval=`getprop debug.egl.swapinterval`

# Game Mod
FD=/data/media/0/Android/data
PUBGG=com.tencent.ig
PUBGK=com.pubg.krmobile
PUBGT=com.rekoo.pubgm
PUBGV=com.vng.pubgmobile
PMSG=""
PSET=$PUBGG
if [ -d $FD/$PUBGG ]; then
	PSET=$PUBGG
	PMSG="PUBG Mobile Global Detected"
else
	if [ -d $FD/$PUBGK ]; then
		PSET=$PUBGK
		PMSG="PUBG Mobile Korea Detected"
	else
		if [ -d $FD/$PUBGT ]; then
			PSET=$PUBGT
			PMSG="PUBG Mobile Taiwan Detected"
		else
			if [ -d $FD/$PUBGV ]; then
				PSET=$PUBGV
				PMSG="PUBG Mobile Vietnam Detected"
			else
				PMSG=""
			fi
		fi
	fi
fi
PUBGD=$FD/$PSET/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Config/Android
PUBGAS=$FD/$PSET/files/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/SaveGames
CFG=$PUBGD/UserCustom.ini
CFGR=$PUBGD/UCM.ini
CFGMP=$Parallax_DIR/pubg/UserCustom.txt
CFGM=$Parallax_DIR/pubg/pubg
crp=$Parallax_DIR/pubg/pubgservice
new_era=$Parallax_INIT/pubguc
PUBGSAV="Active.sav"
ENJOY=$PUBGD/EnjoyCJZC.ini
GM_DIR=$Parallax_DIR/gm
if [ ! -d $GM_DIR ]; then
	mkdir -p $GM_DIR
fi

# ROM Verison
crom=/system/priv-app/MiuiSystemUI
cromv="MIUI"
cromn=`getprop `

# Game Mode set first
if [ ! -f $GM_DIR/gm ]; then
	echo "0" >> $GM_DIR/gm
fi
if [ ! -f $GM_DIR/cog ]; then
	echo "0" >> $GM_DIR/cog
fi
if [ -d $crom ]; then
	if [ -f $GM_DIR/hdu ]; then
		rm -f $GM_DIR/hdu;
	fi
else
	if [ ! -f $GM_DIR/hdu ]; then
		echo "0" >> $GM_DIR/hdu
	fi
fi
if [ ! -f $GM_DIR/ab ]; then
	echo "0" >> $GM_DIR/ab
fi
if [ ! -f $GM_DIR/ims ]; then
	echo "0" >> $GM_DIR/ims
fi
if [ ! -f $GM_DIR/pag ]; then
	echo "0" >> $GM_DIR/pag
fi
if [ ! -f $GM_DIR/gto ]; then
	echo "0" >> $GM_DIR/gto
fi
#if [ ! -f $GM_DIR/sps ]; then
#	echo "0" >> $GM_DIR/sps
#fi
if [ ! -f $GM_DIR/fbg ]; then
	echo "0" >> $GM_DIR/fbg
fi
if [ ! -f $GM_DIR/sog ]; then
	echo "0" >> $GM_DIR/sog
fi


if [ ! -d $Parallax_DIR/profiles ]; then
	mkdir -p $Parallax_DIR/profiles
fi
if [ ! -d $Parallax_DIR/profiles/user ]; then
	mkdir -p $Parallax_DIR/profiles/user
fi
if [ ! -d $Parallax_DIR/profiles/pas ]; then
	mkdir -p $Parallax_DIR/profiles/pas
fi

# Get Profile Spectrum
gpsp=`getprop persist.performance.profile`
pset=""
pspv=""
if [ -f $Parallax_DIR/profiles/profile ]; then
	rm -f $Parallax_DIR/profiles/profile
fi
if [ "$gpsp" = "1" ]; then
	echo "1" >> $Parallax_DIR/profiles/profile
	pspv="Performance"
	pset="Performance"
else
	if [ "$gpsp" = "2" ]; then
		echo "2" >> $Parallax_DIR/profiles/profile
		pspv="Battery"
		pset="Battery"
	else
		if [ "$gpsp" = "3" ]; then
			echo "0" >> $Parallax_DIR/profiles/profile
			pspv="Game seted to balance on boot"
			pset="Gaming"
		else
			if [ "$gpsp" = "4" ]; then
				echo "0" >> $Parallax_DIR/profiles/profile
				pspv="Game+ seted to balance on boot"
				pset="GamingPlus"
			else
				echo "0" >> $Parallax_DIR/profiles/profile
				pspv="Balance"
				pset="Balance"
			fi
		fi
	fi
fi

psp=`cat $Parallax_DIR/profiles/profile`;
if [ "$psp" = "1" ]; then
	pspv="Performance"
else
	if [ "$psp" = "2" ]; then
		pspv="Battery"
	else
		if [ "$psp" = "3" ]; then
			pspv="Game"
		else
			if [ "$psp" = "4" ]; then
				pspv="Game+"
			else
				if [ "$psp" = "0" ]; then
					pspv="Balance"
				else
					rm -f $Parallax_DIR/profiles/profile
					echo "0" >> $Parallax_DIR/profiles/profile
					psp=0
					pspv="Balance"
				fi
			fi
		fi
	fi
fi

#pspv="balance as default profile on boot"
#pset="p.balance"
#setprop persist.performance.profile 0

# Set Parallax Feature
# Parallax Kernel Manager & Profiles setup
setprop performance.support 1
# Enable Charger Max
setprop charger.support 1
# Enable PUBG
setprop pubg.support 1
# Enable Permissiver
setprop permissiver.support 1
# Add kernel name
setprop persist.spectrum.kernel Parallax

# Cek setprop profile
#cekprofile=`getprop performance.support`
#cekcm=`getprop charger.support`
#cekpubg=`getprop pubg.support`
if [ -f $Parallax_DIR/cek_profile ]; then
	rm -f $Parallax_DIR/cek_profile
fi

#echo " " >> $Parallax_DIR/cek_profile
#echo " Cek Profile Set on Boot" >> $Parallax_DIR/cek_profile
#echo " " >> $Parallax_DIR/cek_profile
#echo "Spectrum : $cekprofile" >> $Parallax_DIR/cek_profile
#echo "ChargerMax : $cekcm" >> $Parallax_DIR/cek_profile
#echo "PUBG : $cekpubg" >> $Parallax_DIR/cek_profile
#echo " " >> $Parallax_DIR/cek_profile

#Modules Dir
MD=/data/adb/modules


#Reboot service
rb=$Parallax_DIR/rb

#boot patch
bp=$Parallax_DIR/boot
bpm=$MD/parallax_patch
bpma=$bpm/system/media/theme/cust_config
bpaosp=$bpm/system/media
bpproduct=$bpm/system/product/media
cbs=/system/media/theme/cust_config
cbsaosp=/system/media/bootanimation.zip
cbsproduct=/system/product/media/bootanimation.zip
ibp=$Parallax_DIR/ibp
ibpo=$Parallax_DIR/ibpo
msgbp=$Parallax_DIR/msgbp
irm="0"
vkrm=`cat $MD/Parallax_rm/v`;

# Parallax Version
Parallaxvapp=2.0
Parallaxfd=$MD/Parallax_rm/system/app/Parallax
Parallaxv=$Parallax_DIR/Parallax.version
if [ -f $Parallaxv ]; then
	Parallaxval=`cat $Parallaxv`;
else
	Parallaxval=0;	
fi

InstallParallax() {
	if [ -f $Parallaxv ]; then
		rm -f $Parallaxv
	fi
	echo $Parallaxvapp >> $Parallaxv
	if [ -f $Parallax_INIT/Parallax ]; then
		cp $Parallax_INIT/Parallax $Parallaxfd/Parallax.apk
		rb_play=1
		if [ -d /data/.Parallax ]; then
			rm -rf /data/.Parallax
		fi
	else
		if [ -f /data/.Parallax/Parallax ]; then
			cp /data/.Parallax/Parallax $Parallaxfd/Parallax.apk
			rb_play=1
		else
			LogMSG ""
			LogMSG "Parallax Kernel Manager not detected"
			LogMSG "on internal or external - place install manually"
			LogMSG ""
			rb_play=0
		fi
	fi
	#cp $Parallax_INIT/Parallax $Parallax_DIR/Parallax.apk
	chmod 755 $Parallaxfd
	chmod 644 $Parallaxfd/Parallax.apk

	if [ $rb_play = 1 ]; then
		echo "1" >> $rb
	fi
}

if [ -d data/app/com.parallax.manager* ]; then
	setprop fku.profiles 0
fi

# Check Installation Magisk
MG=/data/adb/magisk/magiskboot

# cek maxfreq cpu
maxcpu=`cat /sys/devices/system/cpu/cpufreq/policy4/scaling_boost_frequencies`;

# log file
LOG=$Parallax_DIR/Parallax.log
LogMSG() {
  [ "$DEBUG" = "1" ] && echo "$@" >> $LOG
}

# get date/time
D=$(date)
LogMSG "$D"

# run which filespecs? - check build.prop
F=$(getprop Parallaxinit.filespec)
if [ -n "$F" ]; then
   FSPEC="$F"
fi

# see whether we have already executed this script
F=$(getprop Parallaxinit.code)
LogMSG "Debug: Parallaxinit.code=$F"
if [ "$F" = "0" ]; then
   LogMSG "Parallax Init script already executed. Stopping."
   exit 0
else
   rm -f $LOG # clean the log
   LogMSG "Running Parallax Init"
   LogMSG "$D"
   # set the property to 0 (ie, we have already run this once)
   setprop Parallaxinit.code 0
fi

RESETPROP="$Parallax_INIT/resetprop -v -n"
# Mount partitions rw 
mount -o remount,rw /;
mount -o remount,rw /system;
mount -o remount,rw /vendor;
sleep 5

if [ "$vk" = "$vkn" ]; then
	LogMSG "-------------------------"
	LogMSG "$vkn"
	LogMSG "-------------------------"
else
	LogMSG "-------------------------"
	LogMSG ""
	LogMSG "Kernel Installed :"
	LogMSG "--------------------------"
	LogMSG "$vkn"
	LogMSG "-------------------------"
	LogMSG ""
	LogMSG "This config only for :"
	LogMSG "--------------------------"
	LogMSG "$vk"
	LogMSG ""
	if [ -d $TM ]; then
		rm -fr $TM
	fi
	if [ -d $BTM ]; then
		rm -fr $BTM
	fi
	if [ -d $bpm ]; then
		rm -fr $bpm
	fi
	if [ -f $Parallax_DIR/pubg/dp ]; then
		rm -f $Parallax_DIR/pubg/dp
	fi
	if [ -f $Parallax_DIR/pubg/pubgservice ]; then
		rm -f $Parallax_DIR/pubg/pubgservice
	fi
	if [ -f $Parallax_DIR/pubg/pb ]; then
		rm -f $Parallax_DIR/pubg/pb
	fi
	if [ -f $Parallax_DIR/pubg/ro ]; then
		rm -f $Parallax_DIR/pubg/ro
	fi
	if [ -d $Parallax_DIR/pubg/ori ]; then
		rm -fr $Parallax_DIR/pubg/ori
	fi
	if [ -f $Parallax_DIR/rm_bp ]; then
		rm -f $Parallax_DIR/rm_bp
	fi
	if [ -f $Parallax_DIR/rm_tm ]; then
		rm -f $Parallax_DIR/rm_tm
	fi
	if [ -f $Parallax_DIR/rm_ac ]; then
		rm -f $Parallax_DIR/rm_ac
	fi
	if [ -f $Parallax_DIR/rm_ti ]; then
		rm -f $Parallax_DIR/rm_ti
	fi
	if [ -f $Parallax_DIR/crp ]; then
		rm -f $Parallax_DIR/crp
	fi
	if [ -f $Parallax_INIT/bp ]; then
		rm -f $Parallax_INIT/bp
	fi
	if [ -f $Parallax_INIT/dc ]; then
		rm -f $Parallax_INIT/dc
	fi
	if [ -f $Parallax_INIT/Parallax ]; then
		rm -f $Parallax_INIT/Parallax
	fi
	if [ -f $Parallax_INIT/te ]; then
		rm -f $Parallax_INIT/te
	fi
	if [ -f $Parallax_INIT/tec ]; then
		rm -f $Parallax_INIT/tec
	fi
	if [ -f $Parallax_INIT/pubg ]; then
		rm -f $Parallax_INIT/pubg
	fi
	if [ -f $Parallax_INIT/pubgsav ]; then
		rm -f $Parallax_INIT/pubgsav
	fi
	if [ -f $Parallax_INIT/Parallaxrm ]; then
		rm -f $Parallax_INIT/Parallaxrm
	fi
	if [ -f $Parallax_INIT/Parallaxp ]; then
		rm -f $Parallax_INIT/Parallaxp
	fi
	if [ -f $Parallax_INIT/p.balance ]; then
		rm -f $Parallax_INIT/p.balance
	fi
	if [ -f $Parallax_INIT/p.battery ]; then
		rm -f $Parallax_INIT/p.battery
	fi
	if [ -f $Parallax_INIT/p.ubattery ]; then
		rm -f $Parallax_INIT/p.ubattery
	fi
	if [ -f $Parallax_INIT/p.gaming ]; then
		rm -f $Parallax_INIT/p.gaming
	fi
	if [ -f $Parallax_INIT/p.performance ]; then
		rm -f $Parallax_INIT/p.performance
	fi
	if [ -f $Parallax_INIT/tebp ]; then
		rm -f $Parallax_INIT/tebp
	fi
	if [ -f $Parallax_INIT/teb ]; then
		rm -f $Parallax_INIT/teb
	fi
	if [ -f $Parallax_INIT/rws ]; then
		rm -f $Parallax_INIT/rws
	fi
	if [ -f $Parallax_INIT/wcnss ]; then
		rm -f $Parallax_INIT/wcnss
	fi
	if [ -f /system/etc/init/balance-thermal ]; then
		rm -f /system/etc/init/balance-thermal.rc
	fi
	if [ -f $Parallax_INIT/Parallaxinit ]; then
		rm -f $Parallax_INIT/Parallaxinit
	fi
	mount -o remount,ro /;
	mount -o remount,ro /system;
	mount -o remount,ro /vendor;
	exit 0
fi

#if [ ! -f $crp ]; then
#	echo "PUBG Service Running" >> $crp
#fi

LogMSG ""
LogMSG "ROM Installed :"
LogMSG "--------------------------"
if [ -d $crom ]; then
	LogMSG "MIUI"
	LogMSG "--------------------------"
	cromv="MIUI"
else
	LogMSG "AOSP"
	LogMSG "--------------------------"
	cromv="AOSP"
fi

# Permissive
#LogMSG "Selinux permissive"
#echo "0" > /sys/fs/selinux/enforce

# SafetyNet
#LogMSG "SafetyNet Flags"
#SETPROP "ro.build.fingerprint" "Xiaomi/beryllium/beryllium:10/QKQ1.190828.002/V11.0.4.0.QEJMIXM:user/release-keys"
#chmod 640 /sys/fs/selinux/enforce
#chmod 440 /sys/fs/selinux/policy

LogMSG ""
LogMSG "Kernel Config"
LogMSG "--------------------------"

# IO Scheduler
LogMSG "- set cfq to default sched"
echo "cfq" > /sys/block/sda/queue/scheduler
echo "cfq" > /sys/block/sdb/queue/scheduler
echo "cfq" > /sys/block/sdc/queue/scheduler
echo "cfq" > /sys/block/sdd/queue/scheduler
echo "cfq" > /sys/block/sde/queue/scheduler
echo "cfq" > /sys/block/sdf/queue/scheduler


# disable boost by default
echo "0" > /sys/module/cgroup/parameters/enable_cpu_boost
echo "0" > /sys/module/cgroup/parameters/boost_gpu
echo "0" > /sys/module/fork/parameters/boost_gpu
echo "0" > /sys/module/page_alloc/parameters/boost_gpu
echo "0" > /sys/module/devfreq/parameters/boost_gpu
echo "0" > /sys/module/devfreq_boost/parameters/boost_gpu
echo "0" > /sys/module/devfreq_devbw/parameters/boost_gpu
echo "0" > /sys/module/drm/parameters/boost_gpu
#echo "0" > /sys/module/msm_drm/parameters/boost_gpu
echo "0" > /sys/module/cpufreq/parameters/userspace_boost_enable
echo "0" > /sys/module/msm_kgsl_core/parameters/boost_gpu


# GPU MIN MAX
LogMSG "- Setup CPU - GPU"
echo "schedutil" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
echo "schedutil" > /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor
echo "1766400" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
echo "300000" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
#echo "2803200" > /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq
#echo "2956800" > /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq
if [ $maxcpu =  2956800 ]; then
	echo "2956800" > /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq
else
	echo "2803200" > /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq
fi
echo "825600" > /sys/devices/system/cpu/cpu4/cpufreq/scaling_min_freq
echo "0" > /sys/module/cpu_input_boost/parameters/input_boost_freq_lp
echo "0" > /sys/module/cpu_input_boost/parameters/input_boost_freq_hp
echo "64" > /sys/module/cpu_input_boost/parameters/input_boost_duration
echo "msm-adreno-tz" > /sys/class/kgsl/kgsl-3d0/devfreq/governor
echo "710" > /sys/class/kgsl/kgsl-3d0/max_clock_mhz
echo "710000000" > /sys/class/kgsl/kgsl-3d0/max_gpuclk
echo "710000000" > /sys/class/kgsl/kgsl-3d0/devfreq/max_freq
echo "140" > /sys/class/kgsl/kgsl-3d0/min_clock_mhz
echo "140000000" > /sys/class/kgsl/kgsl-3d0/min_gpuclk
echo "140000000" > /sys/class/kgsl/kgsl-3d0/devfreq/min_freq
echo "0" > /sys/class/kgsl/kgsl-3d0/throttling

# Battery
echo "500" > /proc/sys/vm/dirty_expire_centisecs
echo "1500" > /proc/sys/vm/dirty_writeback_centisecs

#zRam
LogMSG "- enable zRam"
swapoff /dev/block/zram0
echo "1" > /sys/block/zram0/reset
echo "0" > /sys/block/zram0/disksize
echo "1073741824" > /sys/block/zram0/disksize
echo "1024M" > /sys/block/zram0/mem_limit
#echo "2147483648" > /sys/block/zram0/disksize
#echo "2048M" > /sys/block/zram0/mem_limit
#echo "4294967296" > /sys/block/zram0/disksize
#echo "4096M" > /sys/block/zram0/mem_limit
echo "8" > /sys/block/zram0/max_comp_streams
mkswap /dev/block/zram0
swapon /dev/block/zram0 -p 32758
echo "60" > /proc/sys/vm/swappiness
echo "5" > /proc/sys/vm/dirty_background_ratio
echo "50" > /proc/sys/vm/vfs_cache_pressure
LogMSG "--------------------------"

# Runtime FS tuning: as we have init boottime setting and kernel patch setting
# default readahead to 2048KB. We should adjust the setting upon boot_complete
# for runtime performance
echo "128" > /sys/block/sda/queue/read_ahead_kb
echo "128" > /sys/block/sda/queue/nr_requests
echo "0" > /sys/block/sda/queue/iostats
echo "128" > /sys/block/sdb/queue/read_ahead_kb
echo "128" > /sys/block/sdb/queue/nr_requests
echo "0" > /sys/block/sdb/queue/iostats
echo "128" > /sys/block/sdc/queue/read_ahead_kb
echo "128" > /sys/block/sdc/queue/nr_requests
echo "0" > /sys/block/sdc/queue/iostats
echo "128" > /sys/block/sdd/queue/read_ahead_kb
echo "128" > /sys/block/sdd/queue/nr_requests
echo "0" > /sys/block/sdd/queue/iostats
echo "128" > /sys/block/sde/queue/read_ahead_kb
echo "128" > /sys/block/sde/queue/nr_requests
echo "0" > /sys/block/sde/queue/iostats
echo "128" > /sys/block/sdf/queue/read_ahead_kb
echo "128" > /sys/block/sdf/queue/nr_requests
echo "0" > /sys/block/sdf/queue/iostats
echo "4096" > /sys/devices/virtual/bdi/179:0/read_ahead_kb
echo "512" > /sys/block/zram0/queue/read_ahead_kb
echo "128" > /sys/block/zram0/queue/nr_requests
echo "0" > /sys/block/zram0/queue/iostats
echo "512" > /sys/block/vnswap0/queue/read_ahead_kb
echo "128" > /sys/block/vnswap0/queue/nr_requests
echo "0" > /sys/block/vnswap0/queue/iostats

LogMSG ""
LogMSG "MAGISK"
LogMSG "--------------------------"
LogMSG "Checking installation Magisk"
if [ -f $MG ]; then
	LogMSG "Magisk installed"
	LogMSG "--------------------------"
	LogMSG "Check or install modules"
	#Thermals

	LogMSG ""
	LogMSG "Thermals"
	LogMSG "--------------------------"
	LogMSG "Check Installed Thermal Mod"
	if [ -d $MD/bensthermal_snapdragon845 ]; then
		echo "1" >> $te
		msg="Ben's Thermal"
	fi
	if [ -d $MD/Thermal_Unlock_PocoF1 ]; then
		echo "1" >> $te
		msg="Thermal Unlock"
	fi
	if [ -d $MD/chrysalisthermals ]; then
		echo "1" >> $te
		msg="Chrysalis Thermals"
	fi
	if [ -d $MD/thermalsfordwiky ]; then
		echo "1" >> $te
		msg="Dwiky Thermal"
	fi
	if [ -d $MD/extreme-845-thermals ]; then
		echo "1" >> $te
		msg="Extreme Thermals"
	fi
	if [ -d $MD/Thermal_Mod ]; then
		echo "1" >> $te
		msg="Thermal Mod"
	fi
	if [ -d $MD/thermals ]; then
		echo "1" >> $te
		msg="PAWA9N Thermal"
	fi

	if [ -f $te ]; then
		LogMSG "$msg Installed"
		if [ -d $TM ]; then
			rm -fr $TM
			rm -fr $BTM
			LogMSG "*Parallax - Balance Thermal Removed*"
			#rb="1"
		fi
		rm -f $te
	else
		if [ ! -d $TM ]; then
			if [ ! -d $BTM ]; then
				if [ -f /system/etc/init/balance-thermal.rc ]; then
					rm -f /system/etc/init/balance-thermal.rc
				fi
				if [ -f $Parallax_DIR/rm_tm ]; then
					if [ -f $Parallax_DIR/rm_tmb ]; then
						LogMSG "Parallax and Balance Thermal Uninstalled"
						LogMSG "--------------------------"
						LogMSG "to reinstall Parallax or Balance Thermal"
						LogMSG "remove file (Parallax/rm_tm or Parallax/rm_tmb) select one and reboot"
						LogMSG "Parallax or Balance Thermal will get back"
						LogMSG "if you remove all - Parallax Thermal will be installed"
						rm -fr $TM
						rm -fr $BTM
					else
						LogMSG "Parallax Thermal Uninstalled"
						LogMSG "--------------------------"
						LogMSG "to reinstall Parallax Thermal"
						LogMSG "remove file Parallax/rm_tm, uninstall balance thermal and reboot"
						LogMSG "Parallax Thermal will get back"
						rm -fr $TM

						thermal_install="balance"
						echo "Balance Thermal Config" >> $Parallax_DIR/rm_tmb
						mkdir -p $BTM;
						mkdir -p $BTMbs;
						mkdir -p $BTMes;
						mkdir -p $BTMb;
						mkdir -p $BTMe;
						#read first install
						echo "Installing Balance Thermal" >> $Parallax_DIR/tei
						#Module
						echo "id=balance_thermal" >> $BTM/module.prop
						echo "name=Parallax Balance Thermal" >> $BTM/module.prop
						echo "version=0.1" >> $BTM/module.prop
						echo "versionCode=1" >> $BTM/module.prop
						echo "author=@GtrCraft & @Dread903 Mod by Parallax" >> $BTM/module.prop
						echo "description=Balance Thermal Trothling to save your battery" >> $BTM/module.prop

						echo "" >> $BTMb/thermal-engine
						cp $Parallax_INIT/tebp /system/etc/init/balance-thermal.rc
						cp $Parallax_INIT/teb $BTMbs/thermal-engine
						#cp $Parallax_INIT/rws /system/bin/rws.sh
						cp $Parallax_INIT/tecb $BTMe/thermal-engine.conf
						cp $Parallax_INIT/wcnss $BTMes/WCNSS_qcom_cfg.ini

						chmod 755 $BTMbs/thermal-engine;
						chmod 744 /system/etc/init/balance-thermal.rc

						echo "1" >> $rb
					fi
				else
					if [ -f $Parallax_DIR/rm_tmb ]; then
						LogMSG "Balance Thermal Uninstalled"
						LogMSG "--------------------------"
						LogMSG "to reinstall Balance Thermal"
						LogMSG "remove file Parallax/rm_tmb, uninstall Parallax Thermal and reboot"
						LogMSG "Balance Thermal will get back"
						LogMSG "--------------------------"
						rm -fr $BTM
					else
						echo "Balance Thermal Config" >> $Parallax_DIR/rm_tmb
					fi
					LogMSG "Parallax and Balance Thermal Uninstalled"
					LogMSG "--------------------------"
					echo "Thermal Config" >> $Parallax_DIR/rm_tm
					mkdir -p $TM;
					mkdir -p $TMb;
					mkdir -p $TMe;
					mkdir -p $TMl;
					mkdir -p $TMl64;
					#read first install
					thermal_install="Parallax"
					echo "Installing Parallax Thermal" >> $Parallax_DIR/tei
					#Module
					echo "id=Parallax_thermal" >> $TM/module.prop
					echo "name=Parallax Thermal" >> $TM/module.prop
					echo "version=0.4" >> $TM/module.prop
					echo "versionCode=4" >> $TM/module.prop
					echo "author=Parallax" >> $TM/module.prop
					echo "description=Real Power without any Thermal Trothling" >> $TM/module.prop

					echo "" >> $TMb/thermal-engine
					echo "" >> $TMe/thermal-engine-sdm845.conf
					echo "" >> $TMe/thermal-engine-sdm845-arvr.conf
					echo "" >> $TMe/thermal-engine-sdm845-camera.conf
					echo "" >> $TMe/thermal-engine-sdm845-class0.conf
					echo "" >> $TMe/thermal-engine-sdm845-extreme.conf
					echo "" >> $TMe/thermal-engine-sdm845-high.conf
					echo "" >> $TMe/thermal-engine-sdm845-e10-india.conf
					echo "" >> $TMe/thermal-engine-sdm845-map.conf
					echo "" >> $TMe/thermal-engine-sdm845-nolimits.conf
					echo "" >> $TMe/thermal-engine-sdm845-phone.conf
					echo "" >> $TMe/thermal-engine-sdm845-pubgmhd.conf
					echo "" >> $TMe/thermal-engine-sdm845-sgame.conf
					echo "" >> $TMe/thermal-engine-sdm845-tgame.conf
					echo "" >> $TMl/libthermalclient.so
					echo "" >> $TMl64/libthermalclient.so

					#create service
					#echo "#!/system/bin/sh" >> $TM/service.sh
					#echo "#" >> $TM/service.sh
					#echo "#Parallax Config" >> $TM/service.sh
					#echo "#" >> $TM/service.sh
					#echo "" >> $TM/service.sh
					#echo "echo 10 > /sys/class/thermal/thermal_message/sconfig" >> $TM/service.sh
					#echo "" >> $TM/service.sh

					#cp $Parallax_INIT/te $TMe/thermal-engine-sdm845.conf
					#cp $Parallax_INIT/tec $TMe/thermal-engine-sdm845-arvr.conf
					#cp $Parallax_INIT/tec $TMe/thermal-engine-sdm845-camera.conf
					#cp $Parallax_INIT/tec $TMe/thermal-engine-sdm845-class0.conf
					#cp $Parallax_INIT/tec $TMe/thermal-engine-sdm845-high.conf
					#cp $Parallax_INIT/tec $TMe/thermal-engine-sdm845-e10-india.conf
					#cp $Parallax_INIT/tec $TMe/thermal-engine-sdm845-map.conf
					#cp $Parallax_INIT/tec $TMe/thermal-engine-sdm845-nolimits.conf
					#cp $Parallax_INIT/tec $TMe/thermal-engine-sdm845-phone.conf
					#cp $Parallax_INIT/tec $TMe/thermal-engine-sdm845-pubgmhd.conf
					#cp $Parallax_INIT/tec $TMe/thermal-engine-sdm845-sgame.conf
					LogMSG "Parallax Thermal Installed"
					echo "1" >> $rb
				fi
			else
				if [ ! -f $Parallax_DIR/rm_tmb ]; then
					echo "Balance Thermal Config" >> $Parallax_DIR/rm_tmb
				fi
				if [ ! -f $Parallax_DIR/rm_tm ]; then
					echo "Thermal Config" >> $Parallax_DIR/rm_tm
				fi
				if [ -d $TM ]; then
					rm -fr $TM
				fi
				if [ -f $Parallax_DIR/tei ]; then
					rm -f $Parallax_DIR/tei
					LogMSG "No Thermal Mod Installed"
					LogMSG "Installing Balance Thermal"
				fi
				LogMSG "Balance Thermal Installed"
			fi
		else
			if [ ! -f $Parallax_DIR/rm_tm ]; then
				echo "Thermal Config" >> $Parallax_DIR/rm_tm
			fi
			if [ ! -f $Parallax_DIR/rm_tmb ]; then
				echo "Balance Thermal Config" >> $Parallax_DIR/rm_tmb
			fi
			if [ -d $BTM ]; then
				rm -fr $BTM
			fi
			if [ -f $Parallax_DIR/tei ]; then
				rm -f $Parallax_DIR/tei
				LogMSG "No Thermal Mod Installed"
				LogMSG "Installing Parallax Thermal"
			fi
				LogMSG "Parallax Thermal Installed"
		fi
	fi
	LogMSG "--------------------------"

	LogMSG ""
	LogMSG "Boot Patch"
	LogMSG "--------------------------"
	if [ "$av" = "11" ]; then
			LogMSG "Boot Patch not supported on Android 11"
			if [ -d $bpm ]; then
				rm -fr $bpm;
			fi
	else
	#boot patch
	if [ ! -d $bp ]; then
		mkdir -p $bp;
	fi
	if [ ! -d $bpm ]; then
		if [ -f $Parallax_DIR/rm_bp ]; then
			LogMSG "Boot Patch Uninstalled"
			LogMSG "--------------------------"
			LogMSG "to reinstall boot patch"
			LogMSG "remove file Parallax/rm_bp and reboot"
			LogMSG "boot patch will get back"
			rm -f $ibp
			rm -fr $msgbp
			rm -fr $bpm
		else
			echo "Boot Patch Config" >> $Parallax_DIR/rm_bp
			if [ ! -d $cbs ]; then
				if [ ! -f $cbsaosp ]; then
					if [ ! -f $cbsproduct ]; then
						LogMSG "Boot Patch not supported"
						LogMSG "--------------------------"
					else
						LogMSG "Check Installed Boot Patch"
						if [ ! -d $bpproduct ]; then
							mkdir -p $bpm;
							mkdir -p $bpproduct;
							echo "1" >> $ibp
						else
							echo "1" >> $msgbp
						fi
					fi
				else
					LogMSG "Check Installed Boot Patch"
					if [ ! -d $bpaosp ]; then
						mkdir -p $bpm;
						mkdir -p $bpaosp;
						echo "1" >> $ibp
					else
						echo "1" >> $msgbp
					fi
				fi
			else
				LogMSG "Check Installed Boot Patch"
				if [ ! -d $bpma ]; then
					mkdir -p $bpm;
					mkdir -p $bpma/global;
					echo "1" >> $ibp
					echo "1" >> $ibpo
				else
					echo "1" >> $msgbp
				fi
			fi

			#Installing patch
			if [ -f $ibp ]; then
				rm -f $ibp
				#read first install
				echo "Installing Parallax Boot Patch" >> $Parallax_DIR/bp
				#Module
				echo "id=parallax_patch" >> $bpm/module.prop
				echo "name=Parallax Patcher" >> $bpm/module.prop
				echo "version=0.1" >> $bpm/module.prop
				echo "versionCode=1" >> $bpm/module.prop
				echo "author=Xeno" >> $bpm/module.prop
				echo "description=Patch bootanimation " >> $bpm/module.prop
				if [ -f $ibpo ]; then
					echo "ro.boot.hwc GLOBAL /system/media/theme/cust_config/global/" >> $bpma/bootanim.config
					echo "ro.boot.hwc INDIA /system/media/theme/cust_config/global/" >> $bpma/bootanim.config
				fi
				#service on boot
				cp $Parallax_INIT/bp $bpm/post-fs-data.sh
				echo "1" >> $rb
			fi
		fi
	else
		echo "1" >> $msgbp
		if [ ! -f $Parallax_DIR/rm_bp ]; then
			echo "Boot Patch Config" >> $Parallax_DIR/rm_bp
		fi
	fi

	#messages patch
	if [ -f $msgbp ]; then
		rm -f $msgbp
		if [ -f $Parallax_DIR/bp ]; then
			rm -f $Parallax_DIR/bp
			LogMSG "Boot Patch not installed"
			LogMSG "Installing"
		fi
		LogMSG "Parallax Boot Patch installed"
		LogMSG ""
		LogMSG "Catatan :"
		LogMSG "Place your custom bootanimation.zip"
		LogMSG "to sdcard/Parallax/boot/bootanimation.zip"
		LogMSG "--------------------------"
	fi
	fi
	LogMSG ""
	LogMSG "Parallax Kernel Manager"
	LogMSG "--------------------------"
	LogMSG "Check Installed Parallax"
	# Parallax Tools
	if [ ! -d $MD/Parallax_rm ]; then
		mkdir -p $MD/Parallax_rm;
		mkdir -p $MD/Parallax_rm/system/app/Parallax;
		#Module
		echo "id=parallax_profile" >> $MD/Parallax_rm/module.prop
		echo "name=Parallax Tools" >> $MD/Parallax_rm/module.prop
		echo "version=1.0" >> $MD/Parallax_rm/module.prop
		echo "versionCode=10" >> $MD/Parallax_rm/module.prop
		echo "author=Xeno" >> $MD/Parallax_rm/module.prop
		echo "description=Tools for Parallax Kernel" >> $MD/Parallax_rm/module.prop
		echo "$vk" >> $MD/Parallax_rm/v
		#service on boot
		cp $Parallax_INIT/Parallaxrm $MD/Parallax_rm/service.sh
		if [ ! -f $Parallaxfd/Parallax.apk ]; then
			InstallParallax
		fi
	else
		if [ ! -f $Parallaxfd/Parallax.apk ]; then
			LogMSG "  - Parallax not Installed"
			LogMSG " "
			LogMSG "Installing Parallax"
			InstallParallax
		else
			LogMSG "- Parallax Installed"
			LogMSG ""
			LogMSG "Checking Parallax Version"
			if [ "$Parallaxval" = "$Parallaxvapp" ]; then
				LogMSG "- Parallax Latest Version"
			else
				LogMSG "- Parallax Old Version"
				LogMSG "- Updating Parallax"
				LogMSG " "
				InstallParallax
			fi
		fi
	fi

	#Cek Parallax
	#LogMSG ""
#	LogMSG "Parallax Kernel Manager"
#	LogMSG "--------------------------"
#	LogMSG "Check Installed Parallax"
#	if [ ! -d /system/product/app/Parallax ]; then
#		LogMSG "  - Parallax not Installed"
#		LogMSG " "
#		LogMSG "Installing Parallax"
#		InstallParallax
#	else
#		if [ ! -f /system/product/app/Parallax/Parallax.apk ]; then
#			LogMSG "  - Parallax not Installed"
#			LogMSG " "
#			LogMSG "Installing Parallax"
#			InstallParallax
#		else
#			LogMSG "- Parallax Installed"
#			LogMSG ""
#			LogMSG "Checking Parallax Version"
#			if [ "$Parallaxval" = "$Parallaxvapp" ]; then
#				if [ -d $Parallax_DIR/apk ]; then
#					rm -fr $Parallax_DIR/apk
#				fi
#				LogMSG "- Parallax Latest Version"
#			else
#				LogMSG "- Parallax Old Version"
#				if [ -f $Parallaxv ]; then
#					rm -f $Parallaxv
#				fi
#				echo $Parallaxvapp >> $Parallaxv
#				LogMSG "- Updating Parallax"
#				LogMSG " "
#				InstallParallax
#			fi
#		fi
#	fi
#		if [ ! -d /data/app/com.parallax.manager* ]; then
#			LogMSG "  - Parallax not Installed"
#			if [ ! -d $Parallax_DIR/apk ]; then
#				mkdir -p $Parallax_DIR/apk;
#			fi
#			cp $Parallax_INIT/Parallax $Parallax_DIR/apk/Parallax.apk
#			if [ -f $Parallaxv ]; then
#				rm -f $Parallaxv
#			fi
#			echo $Parallaxvapp >> $Parallaxv
#			LogMSG "Installing Parallax"
#		else
#			LogMSG "- Parallax Installed"
#			LogMSG ""
#			LogMSG "Checking Parallax Version"
#			if [ "$Parallaxval" = "$Parallaxvapp" ]; then
#				if [ -d $Parallax_DIR/apk ]; then
#					rm -fr $Parallax_DIR/apk
#				fi
#				LogMSG "- Parallax Latest Version"
#			else
#				LogMSG "- Parallax Old Version"
#				if [ ! -d $Parallax_DIR/apk ]; then
#					mkdir -p $Parallax_DIR/apk;
#				fi
#				if [ -f $Parallax_DIR/apk/Parallax.apk ]; then
#					rm -f $Parallax_DIR/apk/Parallax.apk
#				fi
#				cp $Parallax_INIT/Parallax $Parallax_DIR/apk/Parallax.apk
#				if [ -f $Parallaxv ]; then
#					rm -f $Parallaxv
#				fi
#				echo $Parallaxvapp >> $Parallaxv
#				LogMSG "- Updating Parallax"
#			fi
#		fi
	LogMSG "--------------------------"

	LogMSG " "
	LogMSG "Profile Feature"
	LogMSG "--------------------------"
	LogMSG "Checking Profile"
	# If there is not a persist value, we need to set one
	# Spectrum App
	setprop persist.performance.profile $psp
	#sleep 1
	#sh $Parallax_INIT/$pset > /dev/null
	LogMSG "Profile setted on $pspv"
	LogMSG "--------------------------"

	#Reboot service
	if [ -f $rb ]; then
		rm -f $rb
		su -c 'svc power reboot'
	fi
else
	LogMSG "Magisk not installed"
	LogMSG "Skip to install modules"
	LogMSG "--------------------------"
fi

if [ ! -f $Parallax_DIR/pubg/ro ]; then
	echo "0" >> $Parallax_DIR/pubg/ro
fi
if [ ! -f $Parallax_DIR/pubg/dp ]; then
	echo "0" >> $Parallax_DIR/pubg/dp
fi
#if [ ! -f $Parallax_DIR/pubg/pb ]; then
#	echo "1" >> $Parallax_DIR/pubg/pb
#fi
if [ ! -f $Parallax_DIR/pubg/phdre ]; then
	echo "1" >> $Parallax_DIR/pubg/phdre
fi
PUBGASRO=`cat $Parallax_DIR/pubg/ro`;
PUBGSAVDP=`cat $Parallax_DIR/pubg/dp`;
#PUBGPB=`cat $Parallax_DIR/pubg/pb`;
PUBGHDRE=`cat $Parallax_DIR/pubg/phdre`;

#if [ "$PUBGPB" = "1" ]; then
#	LogMSG ""
#	LogMSG "Enable HDR Extreme on boot"
#	LogMSG "PUBG Mobile"
#	LogMSG "--------------------------"
#	LogMSG "This config enable after boot"
#	LogMSG "PUBG reconfig after start app"
#	LogMSG "Restart device or start app using"
#	LogMSG "QSTile Start PUBG HDR Extreme"
#	LogMSG "to patch PUBG HDR Extreme again"
#	LogMSG "--------------------------"
#	if [ ! -f $CFGM ]; then
#		if [ ! -f $CFGMP ]; then
#			if [ ! -f $CFG ]; then
#				LogMSG "- Config PUBG Mobile not found"
#			else
#				LogMSG "- Config PUBG Found on default"
#				LogMSG "- $PMSG"
#				cp $CFG $CFGMP
#			fi
#		fi
#	else
#		LogMSG "- PUBG Mobile Patched"
#		cp $CFGM $CFG
#		rm -f $CFGMP
#		rm -f $CFGM
#	fi

#	if [ -f $CFGMP ]; then
#		LogMSG "- Patching PUBG Mobile"
		#cat $CFGMP >> $CFGM
		#echo "[UserCustom DeviceProfile]" >> $CFGM
		#echo "+CVars=0B57292C3B3E3D1C0F101A1C3F292A35160E444F49" >> $CFGM
		#echo "+CVars=0B57292C3B3E3D1C0F101A1C3F292A34101D444F49" >> $CFGM
		#echo "+CVars=0B57292C3B3E3D1C0F101A1C3F292A31101E11444F49" >> $CFGM
		#echo "+CVars=0B57292C3B3E3D1C0F101A1C3F292A313D2B444F49" >> $CFGM

#		if [ -f $CFGR ]; then
#			rm -f $CFGR
#		fi

#		rm -f $CFG
			if [ -f $ENJOY ]; then
				rm -f $ENJOY
			fi
#			cat $new_era >> $CFG
			#echo "[UserCustom DeviceProfile]" >> $CFG
#			echo "+CVars=0B57292C3B3E3D1C0F101A1C3F292A35160E444F49" >> $CFG
#			echo "+CVars=0B57292C3B3E3D1C0F101A1C3F292A34101D444F49" >> $CFG
#			echo "+CVars=0B57292C3B3E3D1C0F101A1C3F292A31101E11444F49" >> $CFG
#			echo "+CVars=0B57292C3B3E3D1C0F101A1C3F292A313D2B444F49" >> $CFG
		#fi
#		rm -f $CFGMP
#		rm -f $CFGM

#		LogMSG "- PUBG Mobile Patched"
#	fi
#fi

#if [ -f $PUBGAS/$PUBGSAV ]; then
#	LogMSG " "
#	LogMSG "- PUBG Can be Patch to Max FPS"
#	LogMSG "  Edit Active.sav on sdcard/Parallax/pubg/ori/Active.sav"
#	LogMSG "  if you don't know how to edit it you can search on google"
#	LogMSG "  unlock 90 fps and copy your edited in to "
#	LogMSG "  sdcard/Parallax/pubg/Active.sav"
#	LogMSG " "
#	LogMSG "  This patch will be reset to default settings"
#	LogMSG "  if you change settings graphics on pubg."
#	LogMSG "  you can get it back with Start PUBG HDR Extreme (Qstile)"
#	LogMSG " "
#	LogMSG "  You can lock this patch, but it's not recomended"
#	LogMSG "  maybe you can get banned, but i don't know"
#	LogMSG "  to enable change value sdcard/Parallax/pubg/ro to 1"
#	LogMSG "  to disbale change value to 0"
#	LogMSG " "
#	if [ ! -d $Parallax_DIR/pubg ]; then
#		mkdir -p $Parallax_DIR/pubg
#	fi
#	if [ ! -d $Parallax_DIR/pubg/ori ]; then
#		mkdir -p $Parallax_DIR/pubg/ori
#	fi
#	if [ ! -f $Parallax_DIR/pubg/ori/$PUBGSAV ]; then
#		#rm -f $Parallax_DIR/pubg/ori/$PUBGSAV
#		cp $PUBGAS/$PUBGSAV $Parallax_DIR/pubg/ori/$PUBGSAV
#	fi
#
#	if [ "$PUBGSAVDP" = "1" ]; then
#		if [ ! -f $Parallax_DIR/pubg/$PUBGSAV ]; then
#			#rm -f $Parallax_DIR/pubg/$PUBGSAV
#			cp $Parallax_INIT/pubgsav $Parallax_DIR/pubg/$PUBGSAV
#		fi
#	fi
#
#	if [ -f $Parallax_DIR/pubg/$PUBGSAV ]; then
#		LogMSG "- PUBG Mod Detected"
#		LogMSG "- Enabling Mod"
#		rm -f $PUBGAS/$PUBGSAV
#		cp $Parallax_DIR/pubg/$PUBGSAV $PUBGAS/$PUBGSAV
#	fi
#	if [ "$PUBGASRO" = "1" ]; then
#		chmod 444 $PUBGAS/$PUBGSAV
#		LogMSG "- Enabling Lock"
#	else
#		chmod 664 $PUBGAS/$PUBGSAV
#		LogMSG "- Disabling Lock"
#	fi
#fi
#LogMSG "--------------------------"

LogMSG " "
LogMSG "Executing init"
LogMSG "--------------------------"
z
# Create the init folder if it does not exist
if [ ! -d $INITD ]; then
   LogMSG "Creating $INITD"
   mkdir -p $INITD
fi

sleep 1
chown -R root:root $INITD
sleep 1
chmod -R 0755 $INITD

# Run scripts in init.d folder
#LogMSG "FileSpecs=$INITD/$FSPEC"
sleep 1
for FILE in $INITD/$FSPEC; do
  sleep 1
  LogMSG "Running init on sdcard/Parallax/init"
  sh $FILE >/dev/null
done;

# Install APK
if [ ! -d $Parallax_DIR/apk ]; then
	LogMSG "--------------------------"
else
	LogMSG " "
	LogMSG "Installer"
	LogMSG "--------------------------"
	LogMSG "Checking Installer"
	if [ "$(ls -A /$Parallax_DIR/apk)" ]; then
		LogMSG "  - Starting Installer"
		cd $Parallax_DIR/apk
		chmod 777 *;
		for apk in *.apk; do
			LogMSG "    * Install $apk"
			pm install -r $apk >/dev/null;
			#sleep 5
			#rm $apk
		done;
		#rm -fr $Parallax_DIR/apk
	else
		LogMSG "  - Installer not running"
		if [ -d $Parallax_DIR/apk ]; then
			rm -fr $Parallax_DIR/apk
		fi
	fi
	LogMSG "--------------------------"
fi

#Removing Config
rm -f $Parallax_DIR/te
rm -f $Parallax_DIR/bp
rm -f $ibp
rm -f $ibpo
rm -f $msgbp
rm -f $rb

# remount partitions ro once finished
mount -o remount,ro /;
mount -o remount,ro /system;
mount -o remount,ro /vendor;
LogMSG ""
LogMSG "Finished!"
LogMSG ""

